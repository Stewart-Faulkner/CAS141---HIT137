import importlib
import subprocess

def check_installation(library):
    try:
        importlib.import_module(library)
        return True
    except ImportError:
        return False

def get_version(library):
    try:
        return importlib.import_module(library).__version__
    except (ImportError, AttributeError):
        return "Version not found"

def check_spacy_model(model_name):
    try:
        import spacy
        spacy.load(model_name)
        return True
    except OSError:
        return False

libraries = ['spacy', 'scispacy', 'transformers', 'torch']
spacy_models = ['en_core_sci_sm', 'en_ner_bc5cdr_md']

print("Checking library installations:")
for lib in libraries:
    if check_installation(lib):
        version = get_version(lib)
        print(f"✅ {lib} is installed (version: {version})")
    else:
        print(f"❌ {lib} is not installed")

print("\nChecking spaCy model installations:")
for model in spacy_models:
    if check_spacy_model(model):
        print(f"✅ {model} is installed")
    else:
        print(f"❌ {model} is not installed")

print("\nChecking for bio-medical models in Hugging Face Transformers:")
try:
    from transformers import AutoTokenizer, AutoModelForTokenClassification
    model_name = "dmis-lab/biobert-v1.1-pubmed"
    tokenizer = AutoTokenizer.from_pretrained(model_name)
    model = AutoModelForTokenClassification.from_pretrained(model_name)
    print(f"✅ Successfully loaded {model_name}")
except Exception as e:
    print(f"❌ Failed to load {model_name}: {str(e)}")

print("\nNote: This script doesn't install libraries, it only checks their installation status.")
print("If any libraries or models are missing, please install them using pip or conda.")
